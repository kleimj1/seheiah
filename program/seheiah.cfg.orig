[general]
#absolute path to seheiah
seheiahPath = /home/falko/seheiah/

[logging]
#loglevel = DEBUG = 10 | INFO = 20 | WARNING = 30 | ERROR = 40 | CRITICAL = 50
#path to logfile (relative to path/seheiah)
logfile = log/seheiah.log
pocketsphinxLogfile = logs/pocketsphinx.log
logFilemode = a
loglevel = 20

[logdb]
#path to sqlite database  (relative to path/seheiah)
database = database/seheiah.sqlite

[monitor]
#Arduino-Port
arduino_port = /dev/sensors/arduino_75237333536351101290
#thresholds to minimize false water flow regognition, sometimes flow sensor detect flow, but there istn't. I think, it's often some induction in cable, from power lines, mobile phones or CB radio users 
sensor_threshold_min = 10
#pir, you can add an additional pir direct to rpi, possible values are true and false
pir = false
#Pir GPIO to use on Pi
pirGPIO = 7
#PIR can be a filter or supporter. As supporter its like a second flow-sensor, as filter it checks, if there was some motion in the two minutes before waterflow. so you can avoid, that Seheiah detects consumption from dishing cleaners or water machines as human consumption
# allowed Values: 1 = supporter, 2 = filter
pirFunc = 1

[checkbehavior]
#intervals to considering in seconds, it should divide 86400
interval = 300
#tolerance, in which an activity event (in this case water flow) has to occure
#means an regulary event can fire in an timeslot +/- (tolerance * interval) seconds 
toleranceIntervals = 3
#number of recorded days, per workdays and free days
observePeriod = 30
#number of days to learn before seheiah decide about emergency case
minObservedPeriod = 7

[classification]
#Value for accepted cosinus similarity
thresholdCosSimilarity = 0.65
thresholdProbability = 0.6

[alarmcascade]
#time to interrupt alarm
alarmValidateTime = 120
#path for snapshot images (relative to path/seheiah)
snapshotpath = images/snapshot-
#email configuration
#email-recipients of alarm call, comma seperated list
recipients = emailaddress1,emailaddress2
#sender
sender = sender@provider
#Host for email delivery
mailhost = mailhost
#port
mailport = 587
#password
mailpass = gehaim
#subject
mailsubject = "Alarm: kontaktiere den Opa"
#message
mailmessage = "Hallo, mit Opa Fritz ist etwas faul. Schau nach!"
#its possible, to start a sip client in emergency case. This should be a Cli-Client like pjsua or linphone
#use sip-client 0 = False, 1 = True
sipClient = 0
#commands to start and stop sip client, paths must be absolute
cmdSipClientStart = /home/falko/linphonestart.sh
cmdSipClientStop = /home/falko/linphonestop.sh

[audiofiles]
unexpectedBehavior = audiofiles/de_unexpected_behavior.mp3
enableMonitoring = audiofiles/de_enable_monitoring.mp3
disableMonitoring	=	audiofiles/de_disable_monitoring.mp3
emergencyCallStart = audiofiles/de_start_emergency_call.mp3
emergencyCallDone = audiofiles/de_emergency_call_done.mp3
#file to play, if patient isn't at home
monitoringOff = audiofiles/halleluja.mp3

[absencefile]
#file to read and write times of absence (relative to path/seheiah)
absenceFile = seheiah_absence

[speechrecognition]
#Hidden Markov Model Dir (relative to path/seheiah)
hmdir = acoustic_model/model_parameters/seheiah_de.cd_semi_200
#language model (relative to path/seheiah)
lm = acoustic_model/etc/seheiah_de.lm
#dict File (relative to path/seheiah)
dict = acoustic_model/etc/seheiah_de.dic
#microphone device (webcam) for pulse audio, get it with "pact list sources"
mic = alsa_input.usb-046d_HD_Webcam_C525_6691A520-00-C525.analog-mono
#Commands
#byebye: deactivates monitoring and avoids false alarms in case of absence
cmdBye = Seheiah tschuess
#turn on activates the monitoring in case of false positive recognition of byebye
#cmd_turn_on =
#alarm_off: interrupts alarm cascade
cmdAlarmOff = Seheiah Alarm
#help: trigger an alarm
cmdHelp = Seheiah Hilfe
#test: returns state of monitoring
cmdTest = Seheiah Test
